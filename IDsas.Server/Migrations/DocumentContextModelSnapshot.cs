// <auto-generated />
using System;
using IDsas.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IDsas.Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DocumentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("IDsas.Server.Entities.Document", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AuthorToken")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("IDsas.Server.Entities.DocumentLink", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssociatedUserToken")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAssociatedUserConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LinkType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentLinks");
                });

            modelBuilder.Entity("IDsas.Server.Entities.DocumentLink", b =>
                {
                    b.HasOne("IDsas.Server.Entities.Document", "Document")
                        .WithMany("DocumentLinks")
                        .HasForeignKey("DocumentId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("IDsas.Server.Entities.Document", b =>
                {
                    b.Navigation("DocumentLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
